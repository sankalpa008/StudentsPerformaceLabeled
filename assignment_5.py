# -*- coding: utf-8 -*-
"""Assignment 5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FHkTCg-dVWAueEIf6UGyVglVbP86FfmN
"""

import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from datetime import datetime

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

# Read the CSV file into a DataFrame
df = pd.read_csv('/content/sample_data/StudentsPerformanceLabeled.csv')

# Display the first 5 rows
print(df.head().to_markdown(index=False, numalign="left", stralign="left"))

# Print the column names and their data types
print(df.info())

# Separate features and target
X = df.drop('performance', axis=1)
y = df['performance']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the categorical features with correct column names
categorical_features = ['gender', 'race/ethnicity', 'parental_level_of_education', 'lunch', 'test_preparation_course']

# Create a ColumnTransformer to apply OneHotEncoder to categorical features
preprocessor = ColumnTransformer(
    transformers=[('cat', OneHotEncoder(), categorical_features)],
    remainder='passthrough'  # Passthrough numerical features
)

# Apply the preprocessing to the data
X_train_encoded = preprocessor.fit_transform(X_train)
X_test_encoded = preprocessor.transform(X_test)

# Convert sparse matrix to dense array if needed
X_train_encoded = X_train_encoded.toarray() if hasattr(X_train_encoded, "toarray") else X_train_encoded
X_test_encoded = X_test_encoded.toarray() if hasattr(X_test_encoded, "toarray") else X_test_encoded

# Scale the features for better SVM performance
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_encoded)
X_test_scaled = scaler.transform(X_test_encoded)

# Initialize and train the SVM model
model = SVC(kernel='rbf', C=1.0, random_state=42)
model.fit(X_train_scaled, y_train)

# Predict on the test set
y_pred = model.predict(X_test_scaled)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

# Print results with timestamp
print(f"\nResults at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}:")
print(f"Accuracy: {accuracy}")
print(f"Precision: {precision}")
print(f"Recall: {recall}")
print(f"F1-score: {f1}")

from google.colab import drive
drive.mount('/content/drive')

